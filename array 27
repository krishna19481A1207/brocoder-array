https://leetcode.com/problems/sort-the-matrix-diagonally/

class Solution {
    public int[][] diagonalSort(int[][] mat) {
        int m =mat.length;
        int n= mat[0].length;
        for(int col=0;col<n;col++)
            sort(col,0,mat,m,n);

        for(int row=1;row<m;row++)
           sort(0,row,mat,m,n);

return mat;
}


    void sort(int col,int row,int[][] mat,int m,int n)
    {
        int c=col;
        int r=row;
        ArrayList<Integer>a= new ArrayList<>();
        
        while(c<n && r<m)
        {
            a.add(mat[r][c]);
            r++;
            c++;
        }
        Collections.sort(a);
         r=row; c= col;
        int ind=0;
        while(r<m && c<n)
        {
            mat[r][c]=a.get(ind++);
            r++;
            c++;
        }

    }

}


https://practice.geeksforgeeks.org/problems/search-in-a-matrix-1587115621/1


class answer
{

static int[] oneDarray(int[][] matrix,int n,int m)
{
 
 int i=0;
 int row=n;
 int col = m;
    int []a= new int[row*col];
 for(int r=0;r< row;r++)
    for(int c=0; c< col ; c++)
        a[i++]=matrix[r][c];

return a;
 }

 static Boolean binarySearch(int[] a,int target)
 {
     int low=0;
     int high=a.length-1;
     Arrays.sort(a);
     while(low <= high)
     {
         int mid= (low+high)>>1;

         if(a[mid]==target) break;
         else if(a[mid]< target) low= mid+1;
         else high= mid-1; 
     }

Boolean ans;
     if(low>high) ans= false;
     else ans=true;
return ans;
}
}


class Solution extends answer
{ 
    //Function to search a given number in row-column sorted matrix.
	static boolean search(int matrix[][], int n, int m, int x) 
	{  
	    // code here
	    int[] a= new int[n *m];
        a= oneDarray(matrix,n,m);
        Boolean ans= binarySearch(a,x);    
        return ans;
	} 
} 



